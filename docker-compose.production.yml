version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:16.2-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
    expose:
      - "${POSTGRES_PORT}"
    networks:
      - fit-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.13.0-management-alpine
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
    expose:
      - "${RABBITMQ_PORT}"
      - "15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/mnesia
    networks:
      - fit-network
    deploy:
      resources:
        limits:
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Content Service
  content-service:
    build:
      context: .
      dockerfile: content_service/compose/production/Dockerfile
    expose:
      - "8001"
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - fit-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
      replicas: 2

  content-worker:
    build:
      context: .
      dockerfile: content_service/compose/production/DockerfileWorker
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - fit-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
      replicas: 2

  content-beat:
    build:
      context: .
      dockerfile: content_service/compose/production/DockerfileBeat
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - fit-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M

  # Fit Service
  fit-service:
    build:
      context: .
      dockerfile: fit_service/compose/production/Dockerfile
    expose:
      - "8002"
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - fit-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
      replicas: 2

  fit-worker:
    build:
      context: .
      dockerfile: fit_service/compose/production/DockerfileWorker
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - fit-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
      replicas: 2

  fit-beat:
    build:
      context: .
      dockerfile: fit_service/compose/production/DockerfileBeat
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - fit-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M

  # Tracker Service
  tracker-service:
    build:
      context: .
      dockerfile: tracker_service/compose/production/Dockerfile
    expose:
      - "8003"
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - fit-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
      replicas: 2

  tracker-worker:
    build:
      context: .
      dockerfile: tracker_service/compose/production/DockerfileWorker
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - fit-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
      replicas: 2

  tracker-beat:
    build:
      context: .
      dockerfile: tracker_service/compose/production/DockerfileBeat
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - fit-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: auth_service/compose/production/Dockerfile
    expose:
      - "8004"
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - fit-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
      replicas: 2

  auth-worker:
    build:
      context: .
      dockerfile: auth_service/compose/production/DockerfileWorker
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - fit-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
      replicas: 2

  auth-beat:
    build:
      context: .
      dockerfile: auth_service/compose/production/DockerfileBeat
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - fit-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - content-service
      - fit-service
      - tracker-service
      - auth-service
    networks:
      - fit-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M

networks:
  fit-network:
    driver: bridge

volumes:
  postgres_data:
    # Persistent volume for PostgreSQL data
  rabbitmq_data:
    # Persistent volume for RabbitMQ data
  uv-cache:
    # Shared volume for uv package manager cache to speed up builds
    # This volume is mounted at /root/.cache/uv in all services
