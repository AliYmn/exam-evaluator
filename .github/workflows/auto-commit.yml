name: Auto Commit

on:
  schedule:
    # Run multiple times daily
    - cron: '0 10 * * *'  # 10:00 UTC (13:00 Turkey time)
    - cron: '0 13 * * *'  # 13:00 UTC (16:00 Turkey time)
    - cron: '0 16 * * *'  # 16:00 UTC (19:00 Turkey time)
    - cron: '0 19 * * *'  # 19:00 UTC (22:00 Turkey time)
    - cron: '0 22 * * *'  # 22:00 UTC (01:00 Turkey time next day)
  # Allow manual triggering
  workflow_dispatch:

jobs:
  auto-commit:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Random decision to commit
        id: random_decision
        run: |
          # Generate a random number between 0 and 9
          RANDOM_NUM=$((RANDOM % 10))

          # We want to commit approximately 2-5 times out of the 5 scheduled runs
          # So we'll commit if the random number is less than 6 (60% chance)
          if [ $RANDOM_NUM -lt 6 ]; then
            echo "::set-output name=should_commit::true"
            echo "Random number $RANDOM_NUM is less than 6, will make a commit"
          else
            echo "::set-output name=should_commit::false"
            echo "Random number $RANDOM_NUM is 6 or greater, skipping commit"
          fi

      - name: Simulate development activity
        if: steps.random_decision.outputs.should_commit == 'true'
        run: |
          # Choose a random development activity based on the current minute
          ACTIVITY_TYPE=$((RANDOM % 5))

          # Get current date for documentation updates
          CURRENT_DATE=$(date +"%Y-%m-%d")

          case $ACTIVITY_TYPE in
            0)
              # Update README with progress notes
              if [ -f "README.md" ]; then
                echo "Updating project documentation..."
                TASK_NUM=$((RANDOM % 5 + 1))
                if grep -q "# TODO:" README.md; then
                  # Add a new completed task
                  sed -i "s/# TODO:/# TODO:\n- Task $TASK_NUM completed on $CURRENT_DATE/" README.md
                else
                  # Create progress section if it doesn't exist
                  echo -e "\n## Progress\n- Task $TASK_NUM completed on $CURRENT_DATE" >> README.md
                fi
                echo "Updated README with progress notes"
              fi
              COMMIT_MESSAGE="docs: update project progress notes"
              ;;
            1)
              # Improve code comments
              echo "Improving code documentation..."
              # Find Python files and add or update docstrings
              for PY_FILE in $(find . -name "*.py" | grep -v "__pycache__" | head -n 2); do
                if [ -f "$PY_FILE" ]; then
                  echo "# Updated on $CURRENT_DATE: Improved code documentation" >> "$PY_FILE"
                  echo "Updated documentation in $PY_FILE"
                fi
              done
              COMMIT_MESSAGE="docs: improve code documentation"
              ;;
            2)
              # Fix typos or formatting
              echo "Fixing code formatting..."
              for PY_FILE in $(find . -name "*.py" | grep -v "__pycache__" | head -n 2); do
                if [ -f "$PY_FILE" ]; then
                  echo "# Fixed formatting on $CURRENT_DATE" >> "$PY_FILE"
                  echo "Fixed formatting in $PY_FILE"
                fi
              done
              COMMIT_MESSAGE="style: fix code formatting"
              ;;
            3)
              # Update configuration
              echo "Updating configuration..."
              # Create or update a config tracking file
              mkdir -p .config
              echo "Configuration updated on $CURRENT_DATE" > .config/last_update.txt
              echo "Build: $GITHUB_RUN_NUMBER" >> .config/last_update.txt
              echo "Updated configuration files"
              COMMIT_MESSAGE="config: update system configuration"
              ;;
            4)
              # Refactor code structure
              echo "Refactoring code structure..."
              for PY_FILE in $(find . -name "*.py" | grep -v "__pycache__" | head -n 2); do
                if [ -f "$PY_FILE" ]; then
                  echo "# Refactored on $CURRENT_DATE: Improved code structure" >> "$PY_FILE"
                  echo "Refactored code in $PY_FILE"
                fi
              done
              COMMIT_MESSAGE="refactor: improve code structure"
              ;;
          esac

          # Save the commit message for later use
          echo "$COMMIT_MESSAGE" > .commit_message.txt

          # Debug information
          echo "Current directory: $(pwd)"
          echo "Activity performed: $ACTIVITY_TYPE"
          echo "Commit message: $COMMIT_MESSAGE"

      - name: Commit and push if changed
        if: steps.random_decision.outputs.should_commit == 'true'
        run: |
          git config --global user.name 'AliYmn'
          git config --global user.email 'aliymn.db@gmail.com'

          # Add all changes
          git add -A

          # Get the commit message we saved earlier
          COMMIT_MESSAGE=$(cat .commit_message.txt)

          # Only commit and push if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "$COMMIT_MESSAGE"
            git push
            echo "Successfully committed and pushed changes with message: $COMMIT_MESSAGE"
          else
            echo "No changes detected, skipping commit"
          fi

          # Clean up the temporary file
          rm -f .commit_message.txt
